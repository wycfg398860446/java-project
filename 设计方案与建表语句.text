1.表设计
    1.1 订单表（orders）
            存储订单的基本信息，如订单号、买家ID、卖家ID、订单状态、支付状态、订单金额等。
            表结构设计需要考虑适当的索引以加快查询速度。
    1.2 订单详情表（order_details）
            存储订单中每个商品的详细信息，如商品ID、商品数量、单价等。
            与订单表通过订单ID关联。
2.索引设计
    对于订单表，至少需要在订单号（order_no）和买家ID（buyer_id）上建立索引，以便快速查询买家的订单。
    对于订单详情表，需要在订单ID（order_id）上建立索引，以便快速查询订单包含的商品详情。
3.分库键设计
    分库的目的是为了分散单个数据库的压力，提高系统的可扩展性和可用性。
    分库键可以根据买家ID（buyer_id）进行设计，将不同买家的订单数据存储在不同的数据库中。
4.分表键设计
    分表的目的是为了降低单个表的数据量，提高查询效率。
    分表键可以根据订单号（order_no）的哈希值进行设计，将订单数据均匀分布在不同的表中。
5.买卖双方查询需求方案
    5.1 买家查询订单
            由于买家查询订单的频率较高，实时性要求高，我们可以在应用层使用缓存技术，如Redis，来存储买家的最近订单数据。
            当买家请求查询订单时，首先查询缓存，如果缓存中没有数据，则从数据库中查询。
    5.2 卖家查询订单
            卖家查询订单的频率也较高，但允许秒级延迟。
            为了满足卖家的查询需求，我们可以设计一个异步的订单更新机制，将最新的订单数据定期更新到卖家数据库中。
            当卖家查询订单时，直接从其对应的数据库中查询，这样可以减少跨库查询的复杂性和延迟。
6.库存扣减方案(防止超卖)
    6.1 使用Redis+Lua脚本实现原子性
    6.2 或者使用Redission中间件实现分布锁


------------------------------------数据库建表语句---------------------------------------
-- 订单表
CREATE TABLE `orders` (
  `order_id` BIGINT NOT NULL AUTO_INCREMENT COMMENT '订单ID',
  `order_no` VARCHAR(32) NOT NULL COMMENT '订单号',
  `buyer_id` BIGINT NOT NULL COMMENT '买家ID',
  `seller_id` BIGINT NOT NULL COMMENT '卖家ID',
  `total_amount` DECIMAL(10, 2) NOT NULL COMMENT '订单总金额',
  `status` TINYINT NOT NULL COMMENT '订单状态（0:待支付，1:已支付，2:已取消，3:已完成）',
  `payment_status` TINYINT NOT NULL COMMENT '支付状态（0:未支付，1:已支付）',
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updated_at` DATETIME NOT NULL ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  PRIMARY KEY (`order_id`),
  INDEX `idx_buyer_id` (`buyer_id`) COMMENT '买家ID索引',
  INDEX `idx_order_no` (`order_no`) COMMENT '订单号索引'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='订单表';

-- 订单详情表
CREATE TABLE `order_details` (
  `detail_id` BIGINT NOT NULL AUTO_INCREMENT COMMENT '详情ID',
  `order_id` BIGINT NOT NULL COMMENT '订单ID',
  `product_id` BIGINT NOT NULL COMMENT '商品ID',
  `quantity` INT NOT NULL COMMENT '数量',
  `unit_price` DECIMAL(10, 2) NOT NULL COMMENT '单价',
  PRIMARY KEY (`detail_id`),
  INDEX `idx_order_id` (`order_id`) COMMENT '订单ID索引'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='订单详情表';